===================
Lambda expressions - simple
===================

let add = {x, y} => x + y;
let double = {n} => n * 2;

---

(program
  (statement
    (assignment_statement
      (let_statement
        target: (identifier)
        expression: (expression
          (lambda
            parameters: (lambda_parameters
              (identifier)
              (identifier))
            body: (expression
              (binary_operation
                left: (expression
                  (identifier))
                right: (expression
                  (identifier)))))))))
  (statement
    (assignment_statement
      (let_statement
        target: (identifier)
        expression: (expression
          (lambda
            parameters: (lambda_parameters
              (identifier))
            body: (expression
              (binary_operation
                left: (expression
                  (identifier))
                right: (expression
                  (integer))))))))))

===================
Lambda expressions - no parameters
===================

let greet = {} => "Hello!";

---

(program
  (statement
    (assignment_statement
      (let_statement
        target: (identifier)
        expression: (expression
          (lambda
            body: (expression
              (string))))))))

===================
Function expressions
===================

let factorial = fn(n)
  if (n <= 1)
    return 1;
  else
    return n * factorial(n - 1);
  endif
endfn;

---

(program
  (statement
    (assignment_statement
      (let_statement
        target: (identifier)
        expression: (expression
          (function_expression
            parameters: (lambda_parameters
              (identifier))
            body: (statement
              (if_statement
                condition: (expression
                  (binary_operation
                    left: (expression
                      (identifier))
                    right: (expression
                      (integer))))
                then_body: (statement
                  (expression_statement
                    expression: (expression
                      (return_expression
                        value: (expression
                          (integer))))))
                else_clause: (else_clause
                  body: (statement
                    (expression_statement
                      expression: (expression
                        (return_expression
                          value: (expression
                            (binary_operation
                              left: (expression
                                (identifier))
                              right: (expression
                                (call
                                  function: (identifier)
                                  arguments: (expression
                                    (binary_operation
                                      left: (expression
                                        (identifier))
                                      right: (expression
                                        (integer)))))))))))))))))))))

===================
Function statements
===================

fn greet(name)
  return "Hello, " + name + "!";
endfn

---

(program
  (statement
    (function_statement
      name: (identifier)
      parameters: (lambda_parameters
        (identifier))
      body: (statement
        (expression_statement
          expression: (expression
            (return_expression
              value: (expression
                (binary_operation
                  left: (expression
                    (binary_operation
                      left: (expression
                        (string))
                      right: (expression
                        (identifier))))
                  right: (expression
                    (string)))))))))))

===================
List comprehensions
===================

let squares = {x * x for x in [1..10]};

---

(program
  (statement
    (assignment_statement
      (let_statement
        target: (identifier)
        expression: (expression
          (range_comprehension
            expression: (expression
              (binary_operation
                left: (expression
                  (identifier))
                right: (expression
                  (identifier))))
            variable: (identifier)
            iterable: (range
              start: (expression
                (integer))
              end: (expression
                (integer)))))))))
