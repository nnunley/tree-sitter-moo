===================
Lambda expressions - simple
===================

let add = {x, y} => x + y;
let double = {n} => n * 2;

---

(program
  (local_assignment
    (identifier)
    (lambda_expr
      params: (lambda_params
        (lambda_param
          (scatter_target
            (identifier)))
        (lambda_param
          (scatter_target
            (identifier))))
      body: (binary_expr
        left: (identifier)
        right: (identifier))))
  (local_assignment
    (identifier)
    (lambda_expr
      params: (lambda_params
        (lambda_param
          (scatter_target
            (identifier))))
      body: (binary_expr
        left: (identifier)
        right: (INTEGER)))))

===================
Lambda expressions - no parameters
===================

let greet = {} => "Hello!";

---

(program
  (local_assignment
    (identifier)
    (lambda_expr
      body: (STRING))))

===================
Function expressions
===================

let factorial = fn(n)
  if (n <= 1)
    return 1;
  else
    return n * factorial(n - 1);
  endif
endfn;

---

(program
  (local_assignment
    (identifier)
    (fn_expr
      params: (lambda_params
        (lambda_param
          (scatter_target
            (identifier))))
      body: (if
        (binary_expr
          left: (identifier)
          right: (INTEGER))
        (return
          (INTEGER))
        (return
          (binary_expr
            left: (identifier)
            right: (call
              function: (identifier)
              arguments: (arglist
                (binary_expr
                  left: (identifier)
                  right: (INTEGER))))))))))

===================
Function statements
===================

fn greet(name)
  return "Hello, " + name + "!";
endfn

---

(program
  (fn_statement
    name: (identifier)
    params: (lambda_params
      (lambda_param
        (scatter_target
          (identifier))))
    body: (return
      (binary_expr
        left: (binary_expr
          left: (STRING)
          right: (identifier))
        right: (STRING)))))

===================
List comprehensions
===================

let squares = {x * x for x in [1..10]};

---

(program
  (local_assignment
    (identifier)
    (range_comprehension
      (binary_expr
        left: (identifier)
        right: (identifier))
      (identifier)
      (for_range_clause
        (INTEGER)
        (INTEGER)))))