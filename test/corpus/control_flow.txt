===================
Simple while loop
===================

while (x < 10)
    x = x + 1;
endwhile

---

(program
  (while
    (binary_expr
      left: (identifier)
      right: (INTEGER))
    (assignment_expr
      left: (identifier)
      right: (binary_expr
        left: (identifier)
        right: (INTEGER)))))

===================
Labeled while loop
===================

while main_loop (running)
    break main_loop;
endwhile

---

(program
  (while
    label: (identifier)
    (identifier)
    (break
      (identifier))))

===================
For range loop
===================

for i in [1..10]
    print(i);
endfor

---

(program
  (for
    (identifier)
    (for_range_clause
      (INTEGER)
      (INTEGER))
    (call
      function: (identifier)
      arguments: (arglist
        (identifier)))))

===================
For in loop
===================

for item in (my_list)
    process(item);
endfor

---

(program
  (for
    (identifier)
    (for_in_clause
      (identifier))
    (call
      function: (identifier)
      arguments: (arglist
        (identifier)))))

===================
Fork statement
===================

fork (60)
    background_task();
endfork

---

(program
  (fork
    (INTEGER)
    (call
      function: (identifier)
      arguments: (arglist))))

===================
Labeled fork
===================

fork task_fork (delay)
    long_running_operation();
endfork

---

(program
  (fork
    label: (identifier)
    (identifier)
    (call
      function: (identifier)
      arguments: (arglist))))

===================
Begin end block
===================

begin
    statement1();
    statement2();
end

---

(program
  (block
    (call
      function: (identifier)
      arguments: (arglist))
    (call
      function: (identifier)
      arguments: (arglist))))

===================
Break statement
===================

break;
break loop_label;

---

(program
  (break)
  (break
    (identifier)))

===================
Continue statement
===================

continue;
continue loop_label;

---

(program
  (continue)
  (continue
    (identifier)))

===================
Return with expression
===================

return;
return 42;
return x + y;

---

(program
  (return)
  (return
    (INTEGER))
  (return
    (binary_expr
      left: (identifier)
      right: (identifier))))