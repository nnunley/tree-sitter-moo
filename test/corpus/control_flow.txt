===================
Simple while loop
===================

while (x < 10)
  x = x + 1;
endwhile

---

(program
  (while
    (assignment_expr
      (conditional_expr
        (binary_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (identifier))))
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))
    (assignment_expr
      (identifier)
      (assignment_expr
        (conditional_expr
          (binary_expr
            (unary_expr
              (postfix_expr
                (primary_expr
                  (identifier))))
            (unary_expr
              (postfix_expr
                (primary_expr
                  (INTEGER))))))))))

===================
Labeled while loop
===================

while outer (condition)
  break outer;
endwhile

---

(program
  (while
    label: (identifier)
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (primary_expr
              (identifier))))))
    (break
      (identifier))))

===================
For range loop
===================

for x in [1..10]
  print(x);
endfor

---

(program
  (for
    (identifier)
    (for_range_clause
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER))))))
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (identifier)
            (arglist
              (assignment_expr
                (conditional_expr
                  (unary_expr
                    (postfix_expr
                      (primary_expr
                        (identifier)))))))))))))

===================
For in loop
===================

for item in (mylist)
  process(item);
endfor

---

(program
  (for
    (identifier)
    (for_in_clause
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (identifier)))))))
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (identifier)
            (arglist
              (assignment_expr
                (conditional_expr
                  (unary_expr
                    (postfix_expr
                      (primary_expr
                        (identifier)))))))))))))

===================
Fork statement
===================

fork (10)
  do_something();
endfork

---

(program
  (fork
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (primary_expr
              (INTEGER))))))
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (identifier)
            (arglist)))))))

===================
Labeled fork
===================

fork mytask (delay)
  background_job();
endfork

---

(program
  (fork
    label: (identifier)
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (primary_expr
              (identifier))))))
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (identifier)
            (arglist)))))))

===================
Begin end block
===================

begin
  x = 1;
  y = 2;
end

---

(program
  (block
    (assignment_expr
      (identifier)
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))
    (assignment_expr
      (identifier)
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))))

===================
Break statement
===================

while (true)
  if (done)
    break;
  endif
endwhile

---

(program
  (while
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (primary_expr
              (boolean))))))
    (if
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (identifier))))))
      (break))))

===================
Continue statement
===================

for x in [1..10]
  if (x % 2 == 0)
    continue;
  endif
  print(x);
endfor

---

(program
  (for
    (identifier)
    (for_range_clause
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER))))))
      (assignment_expr
        (conditional_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))
    (if
      (assignment_expr
        (conditional_expr
          (binary_expr
            (binary_expr
              (unary_expr
                (postfix_expr
                  (primary_expr
                    (identifier))))
              (unary_expr
                (postfix_expr
                  (primary_expr
                    (INTEGER)))))
            (unary_expr
              (postfix_expr
                (primary_expr
                  (INTEGER)))))))
      (continue))
    (assignment_expr
      (conditional_expr
        (unary_expr
          (postfix_expr
            (identifier)
            (arglist
              (assignment_expr
                (conditional_expr
                  (unary_expr
                    (postfix_expr
                      (primary_expr
                        (identifier)))))))))))))

===================
Return with expression
===================

return x + 1;

---

(program
  (return
    (assignment_expr
      (conditional_expr
        (binary_expr
          (unary_expr
            (postfix_expr
              (primary_expr
                (identifier))))
          (unary_expr
            (postfix_expr
              (primary_expr
                (INTEGER)))))))))
