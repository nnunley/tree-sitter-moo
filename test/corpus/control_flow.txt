===================
Simple while loop
===================

while (x < 10)
    x = x + 1;
endwhile

---

(program
  (statement
    (while_statement
      condition: (expression
        (binary_operation
          left: (expression
            (identifier))
          right: (expression
            (integer))))
      body: (statement
        (expression_statement
          expression: (expression
            (assignment_operation
              left: (identifier)
              right: (expression
                (binary_operation
                  left: (expression
                    (identifier))
                  right: (expression
                    (integer)))))))))))

===================
Labeled while loop
===================

while main_loop (running)
    break main_loop;
endwhile

---

(program
  (statement
    (while_statement
      label: (identifier)
      condition: (expression
        (identifier))
      body: (statement
        (expression_statement
          expression: (expression
            (break_expression
              label: (identifier))))))))

===================
For range loop
===================

for i in [1..10]
    print(i);
endfor

---

(program
  (statement
    (for_statement
      variable: (identifier)
      iterable: (range
        start: (expression
          (integer))
        end: (expression
          (integer)))
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)
              arguments: (expression
                (identifier)))))))))

===================
For in loop
===================

for item in (my_list)
    process(item);
endfor

---

(program
  (statement
    (for_statement
      variable: (identifier)
      iterable: (expression
        (expression
          (identifier)))
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)
              arguments: (expression
                (identifier)))))))))

===================
Fork statement
===================

fork (60)
    background_task();
endfork

---

(program
  (statement
    (fork_statement
      expression: (expression
        (integer))
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier))))))))

===================
Labeled fork
===================

fork task_fork (delay)
    long_running_operation();
endfork

---

(program
  (statement
    (fork_statement
      label: (identifier)
      expression: (expression
        (identifier))
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier))))))))

===================
Begin end block
===================

begin
    statement1();
    statement2();
end

---

(program
  (statement
    (block_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier))))))))

===================
Break statement
===================

break;
break loop_label;

---

(program
  (statement
    (expression_statement
      (expression
        (break_expression))))
  (statement
    (expression_statement
      (expression
        (break_expression
          (identifier))))))

===================
Continue statement
===================

continue;
continue loop_label;

---

(program
  (statement
    (expression_statement
      (expression
        (continue_expression))))
  (statement
    (expression_statement
      (expression
        (continue_expression
          (identifier))))))

===================
Return with expression
===================

return;
return 42;
return x + y;

---

(program
  (statement
    (expression_statement
      expression: (expression
        (return_expression))))
  (statement
    (expression_statement
      expression: (expression
        (return_expression
          value: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (return_expression
          value: (expression
            (binary_operation
              left: (expression
                (identifier))
              right: (expression
                (identifier)))))))))
