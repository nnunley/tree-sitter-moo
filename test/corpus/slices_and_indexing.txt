===================
Basic indexing
===================

arr[0];
list[5];
str[i];
obj.prop[x + 1];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression
            (identifier))))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (property_access
              object: (expression
                (identifier))
              property: (identifier)))
          index: (expression
            (binary_operation
              left: (expression
                (identifier))
              right: (expression
                (integer)))))))))

===================
Basic slices
===================

str[1..5];
list[0..10];
data[i..j];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (identifier))
          end: (expression
            (identifier)))))))

===================
Slices with $ (length marker)
===================

str[1..$];
list[$..$];
data[$..5];
text[0..$];
name[$-3..$];
items[1..$-1];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression)
          end: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression)
          end: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (binary_operation
              left: (expression)
              right: (expression
                (integer))))
          end: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression
            (binary_operation
              left: (expression)
              right: (expression
                (integer)))))))))

===================
Special $ indexing
===================

arr[$];
list[$];
str[$];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression)))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression))))))

===================
Complex slice expressions
===================

data[i + 1..j - 1];
str[1..length(str)];
list[foo()..bar()];
nested[a[0]..b[$]];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (binary_operation
              left: (expression
                (identifier))
              right: (expression
                (integer))))
          end: (expression
            (binary_operation
              left: (expression
                (identifier))
              right: (expression
                (integer))))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (integer))
          end: (expression
            (call
              function: (identifier)
              arguments: (expression
                (identifier))))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (call
              function: (identifier)))
          end: (expression
            (call
              function: (identifier)))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (identifier))
          start: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression
                (integer))))
          end: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression))))))))

===================
Nested indexing and slicing
===================

matrix[i][j];
arr[1..5][0];
data[x][y..z];
complex[a..b][c][d..$];

---

(program
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression
                (identifier))))
          index: (expression
            (identifier))))))
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (slice
              object: (expression
                (identifier))
              start: (expression
                (integer))
              end: (expression
                (integer))))
          index: (expression
            (integer))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression
                (identifier))))
          start: (expression
            (identifier))
          end: (expression
            (identifier))))))
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (index_access
              object: (expression
                (slice
                  object: (expression
                    (identifier))
                  start: (expression
                    (identifier))
                  end: (expression
                    (identifier))))
              index: (expression
                (identifier))))
          start: (expression
            (identifier))
          end: (expression))))))

===================
$ in nested contexts
===================

// $ refers to the list {3, 2, 4}, not "frob"
"frob"[{3, 2, 4}[$]];

// $ refers to inner_list
outer[inner_list[$]];

// Multiple $ at different levels
data[arr[$-1]][1..$];

---

(program
  (comment)
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (string))
          index: (expression
            (index_access
              object: (expression
                (list
                  elements: (expression
                    (integer))
                  elements: (expression
                    (integer))
                  elements: (expression
                    (integer))))
              index: (expression)))))))
  (comment)
  (statement
    (expression_statement
      expression: (expression
        (index_access
          object: (expression
            (identifier))
          index: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression)))))))
  (comment)
  (statement
    (expression_statement
      expression: (expression
        (slice
          object: (expression
            (index_access
              object: (expression
                (identifier))
              index: (expression
                (index_access
                  object: (expression
                    (identifier))
                  index: (expression
                    (binary_operation
                      left: (expression)
                      right: (expression
                        (integer))))))))
          start: (expression
            (integer))
          end: (expression))))))
