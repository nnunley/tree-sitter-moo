===================
Try-except statements
===================

try
  foo();
except (E_TYPE)
  return 0;
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (return_expression
                value: (expression
                  (integer))))))))))

===================
Try-except with lowercase errors
===================

try
  bar();
except (e_type)
  return 1;
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (return_expression
                value: (expression
                  (integer))))))))))

===================
Try-except with mixed case errors
===================

try
  baz();
except err (E_Type, e_ARGS, E_pErM)
  notify("Error caught");
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        variable: (identifier)
        codes: (error_code)
        codes: (error_code)
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier)
                arguments: (expression
                  (string))))))))))

===================
Try-except with any
===================

try
  foo();
except (ANY)
  return "error";
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        body: (statement
          (expression_statement
            expression: (expression
              (return_expression
                value: (expression
                  (string))))))))))

===================
Try-except with lowercase ANY
===================

try
  risky();
except (any)
  return false;
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        body: (statement
          (expression_statement
            expression: (expression
              (return_expression
                value: (expression
                  (identifier))))))))))

===================
Try-except with label
===================

try
  risky_operation();
except err (E_PERM, E_ARGS)
  notify("Error: " + err);
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        variable: (identifier)
        codes: (error_code)
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier)
                arguments: (expression
                  (binary_operation
                    left: (expression
                      (string))
                    right: (expression
                      (identifier))))))))))))

===================
Try-except with multiple handlers
===================

try
  some_code();
except (E_TYPE)
  handle_type_error();
except (E_ARGS)
  handle_args_error();
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier))))))
      handlers: (except_clause
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier)))))))))

===================
Try-except with finally
===================

try
  process();
except (E_TYPE)
  handle_error();
finally
  cleanup();
endtry

---

(program
  (statement
    (try_statement
      body: (statement
        (expression_statement
          expression: (expression
            (call
              function: (identifier)))))
      handlers: (except_clause
        codes: (error_code)
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier))))))
      finally: (finally_clause
        body: (statement
          (expression_statement
            expression: (expression
              (call
                function: (identifier)))))))))

===================
Try expression simple
===================

`x.prop ! E_PROPNF => "default"';

---

(program
  (statement
    (expression_statement
      expression: (expression
        (try_expression
          expression: (expression
            (property_access
              object: (expression
                (identifier))
              property: (identifier)))
          codes: (error_code)
          fallback: (expression
            (string)))))))

===================
Try expression with lowercase error
===================

`obj.value ! e_propnf => 0';

---

(program
  (statement
    (expression_statement
      expression: (expression
        (try_expression
          expression: (expression
            (property_access
              object: (expression
                (identifier))
              property: (identifier)))
          codes: (error_code)
          fallback: (expression
            (integer)))))))

===================
Try expression with error list
===================

`obj:method() ! E_INVARG, E_PERM => 0';

---

(program
  (statement
    (expression_statement
      expression: (expression
        (try_expression
          expression: (expression
            (method_call
              object: (expression
                (identifier))
              method: (identifier)))
          codes: (error_code)
          codes: (error_code)
          fallback: (expression
            (integer)))))))

===================
Try expression with mixed case errors
===================

`server:command() ! e_invarg, E_Perm, E_TYPE => false';

---

(program
  (statement
    (expression_statement
      expression: (expression
        (try_expression
          expression: (expression
            (method_call
              object: (expression
                (identifier))
              method: (identifier)))
          codes: (error_code)
          codes: (error_code)
          codes: (error_code)
          fallback: (expression
            (identifier)))))))

===================
Try expression without handler
===================

`dangerous() ! ANY';

---

(program
  (statement
    (expression_statement
      expression: (expression
        (try_expression
          expression: (expression
            (call
              function: (identifier))))))))
