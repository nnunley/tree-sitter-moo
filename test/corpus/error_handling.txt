===================
Try-except statements
===================

try
  foo();
except (E_TYPE)
  return 0;
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (ERR)
      (return
        (INTEGER)))))

===================
Try-except with lowercase errors
===================

try
  bar();
except (e_type)
  return 1;
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (ERR)
      (return
        (INTEGER)))))

===================
Try-except with mixed case errors
===================

try
  baz();
except err (E_Type, e_ARGS, E_pErM)
  notify("Error caught");
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (identifier)
      (ERR)
      (ERR)
      (ERR)
      (call
        function: (identifier)
        arguments: (arglist
          (STRING))))))

===================
Try-except with any
===================

try
  foo();
except (ANY)
  return "error";
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (return
        (STRING)))))

===================
Try-except with lowercase ANY
===================

try
  risky();
except (any)
  return false;
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (return
        (boolean)))))

===================
Try-except with label
===================

try
  risky_operation();
except err (E_PERM, E_ARGS)
  notify("Error: " + err);
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (identifier)
      (ERR)
      (ERR)
      (call
        function: (identifier)
        arguments: (arglist
          (binary_expr
            left: (STRING)
            right: (identifier)))))))

===================
Try-except with multiple handlers
===================

try
  some_code();
except (E_TYPE)
  handle_type_error();
except (E_ARGS)
  handle_args_error();
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (ERR)
      (call
        function: (identifier)
        arguments: (arglist)))
    except: (except
      (ERR)
      (call
        function: (identifier)
        arguments: (arglist)))))

===================
Try-except with finally
===================

try
  process();
except (E_TYPE)
  handle_error();
finally
  cleanup();
endtry

---

(program
  (try
    body: (call
      function: (identifier)
      arguments: (arglist))
    except: (except
      (ERR)
      (call
        function: (identifier)
        arguments: (arglist)))
    finally: (call
      function: (identifier)
      arguments: (arglist))))

===================
Try expression simple
===================

`x.prop ! E_PROPNF => "default"';

---

(program
  (try_expr
    (property_access
      object: (identifier)
      property: (identifier))
    (ERR)
    (STRING)))

===================
Try expression with lowercase error
===================

`obj.value ! e_propnf => 0';

---

(program
  (try_expr
    (property_access
      object: (identifier)
      property: (identifier))
    (ERR)
    (INTEGER)))

===================
Try expression with error list
===================

`obj:method() ! E_INVARG, E_PERM => 0';

---

(program
  (try_expr
    (method_call
      object: (identifier)
      method: (identifier)
      arguments: (arglist))
    (ERR)
    (ERR)
    (INTEGER)))

===================
Try expression with mixed case errors
===================

`server:command() ! e_invarg, E_Perm, E_TYPE => false';

---

(program
  (try_expr
    (method_call
      object: (identifier)
      method: (identifier)
      arguments: (arglist))
    (ERR)
    (ERR)
    (ERR)
    (boolean)))

===================
Try expression without handler
===================

`dangerous() ! ANY';

---

(program
  (try_expr
    (call
      function: (identifier)
      arguments: (arglist))))